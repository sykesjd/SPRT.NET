"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ClipLazor;
(function (ClipLazor) {
    class Clipboard {
        /**
         * Checks if the Clipboard API is supported in the current browser.
         *
         * @returns {boolean} `true` if the Clipboard API is supported, otherwise `false`.
         */
        isClipboardSupported() {
            return !!navigator.clipboard;
        }
        /**
         * Checks if the browser has permission to write to the clipboard.
         *
         * @param {PermissionName} command - The permission name to check (e.g., 'clipboard-write').
         * @returns {Promise<boolean>} A Promise that resolves to `true` if the permission is granted, otherwise `false`.
         */
        hasClipboardPermission(command) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const permissionStatus = yield navigator.permissions.query({ name: command });
                    return permissionStatus.state === 'granted';
                }
                catch (error) {
                    console.error(`Error checking ${command} permission:`, error);
                    return false;
                }
            });
        }
        /**
         * Copies the given text to the clipboard.
         *
         * @param {string} text - The text to be copied to the clipboard.
         * @returns {Promise<boolean>} A Promise that resolves to `true` if the copy operation is successful, otherwise `false`.
         */
        copyToClipboard(text) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    yield navigator.clipboard.writeText(text);
                    return true;
                }
                catch (error) {
                    console.error("Error copying to clipboard:", error);
                    return false;
                }
            });
        }
        /**
         * Reads text data from the clipboard.
         *
         * @returns {Promise<string | null>} A Promise that resolves to the copied text if successful, otherwise `null`.
         */
        pasteFromClipboard() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const text = yield navigator.clipboard.readText();
                    return text;
                }
                catch (error) {
                    console.error("Error pasting from clipboard:", error);
                    return null;
                }
            });
        }
        /**
         * Copies binary data (e.g., Uint8Array) to the clipboard with a specified MIME type.
         *
         * @param {Uint8Array} data - The binary data to be copied to the clipboard.
         * @param {string} mimeType - The MIME type of the data.
         * @returns {Promise<boolean>} A Promise that resolves to `true` if the copy operation is successful, otherwise `false`.
         */
        copyDataToClipboard(data, mimeType) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const blob = new Blob([data], { type: mimeType });
                    yield navigator.clipboard.write([new ClipboardItem({ [mimeType]: blob })]);
                    return true;
                }
                catch (error) {
                    console.error("Error copying data to clipboard:", error);
                    return false;
                }
            });
        }
        /**
         * Reads binary data (e.g., Uint8Array) from the clipboard with a specified MIME type.
         *
         * @param {string} mimeType - The MIME type of the data to read.
         * @returns {Promise<Uint8Array | null>} A Promise that resolves to the binary data if found, otherwise `null`.
         */
        readDataFromClipboard(mimeType) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const clipboardItems = yield navigator.clipboard.read();
                    for (const item of clipboardItems) {
                        for (const type of item.types) {
                            if (type === mimeType) {
                                const blob = yield item.getType(type);
                                if (blob instanceof Blob) {
                                    const arrayBuffer = yield blob.arrayBuffer();
                                    return new Uint8Array(arrayBuffer);
                                }
                            }
                        }
                    }
                    return null; // Data with the specified mimeType not found in clipboard
                }
                catch (error) {
                    console.error("Error reading data from clipboard:", error);
                    return null;
                }
            });
        }
    }
    function Load() {
        window['clipLazor'] = new Clipboard();
    }
    ClipLazor.Load = Load;
})(ClipLazor || (ClipLazor = {}));
ClipLazor.Load();
